#!/usr/bin/env bash
export ONI=${CODE_HOME}/oni
export CONFIG_DIR=${HOME}/.config
# run `kc` to see your kubernetes contexts
[[ -e ${PROD_CONTEXT} ]] || export PROD_CONTEXT=my-prod-context
[[ -e ${DEV_CONTEXT}  ]] || export DEV_CONTEXT=my-dev-context
[[ -e ${QA_CONTEXT}   ]] || export QA_CONTEXT=my-qa-context

function show_help(){
    a=$(alias $@)
    msg=$(echo -en "$a" | awk -F'help=' '{ print $2 }' | awk -F';' '{ print $1 }')
    echo -en "$msg" | tr -d '"'
}

function show_all_help(){
    aliases=$(alias | grep 'help=' | awk -F'=' '{ print $1 }' | awk '{ print $2 }')
    for alias in $aliases
    do
        help_msg=$(show_help $alias)
        printf "%15s    %-s\n" $alias "$help_msg"
    done
}

# core aliases
alias bc='help="clean up git branches"; branch-cleanup'
alias branch-cleanup='help="clean up git branches"; $ONI/bin/branch-cleanup.sh'
alias branch='help="export current branch"; export BRANCH=$(git branch | grep "*" | awk "{ print \$2 }") && echo $BRANCH'
alias branches='help="show all branches"; git branch -a | grep -v "remotes" | tr -d "*" | awk "{ print \$1 }"'
alias config='help="configure the project defaults"; project; cd ${CODE_HOME}/${PROJECT} . && cat $ONI/extras/.gitignore.template > ./.gitignore'
alias d='help="list running containers in project"; project; echo -e "CONTAINER ID    NAMES";docker ps -a --format="table {{.ID}}    {{.Names}}" | grep $PROJECT'
alias ff='help="tldr fuzzy finder"; tldr --list | fzf --preview "tldr {1} --color=always" --preview-window=right,70% | xargs tldr'
alias flush='help="flush all dev stores"; flush_etcd; flush_redis'
alias flush_etcd='help="flush etcd"; etcdctl del "" --prefix 2> /dev/null'
alias flush_redis='help="flush redis"; docker exec -it redis.${PROJECT} redis-cli flushall 2> /dev/null'
alias g='help="lazy git push"; project && git add . && git commit -m "pipeline test" && git push'
alias killall='help="kill all project apps"; for pid in $(ps -ef | grep -i $PROJECT | grep "__debug\|source" | grep -v "grep" | awk "{print $2}"); do kill -9  $pid; done'
alias p='help="initialize project"; project && echo $PROJECT'
alias post='help="curl post helper"; curl -H "Content-Type: application/json" -X POST'
alias project='help="initialize project"; export PROJECT=${PWD##*/}; src; [[ -f venv/bin/activate ]] && source $ONI/extras/.aliases && source venv/bin/activate || echo $PROJECT &> /dev/null'
alias remake='help="go clean make all"; make clean && go mod vendor && go mod tidy && make all'
alias reset='help="git reset project"; git reset --hard HEAD'
alias src='help="source .env file"; set -o allexport; [[ -f .env ]] && source .env; set +o allexport'
alias tag='help="show branch tag"; branch && [[ $BRANCH != "master" ]] || echo $(git tag | tail -1)'
alias update='help="update python libraries"; project; pip uninstall -r requirements.txt --yes && pip install -r requirements.txt --upgrade --force --no-cache-dir'
alias uuid='help="generate uuid"; uuidgen | tr [:upper:] [:lower:]'
alias vc='help="reset neovim config"; cp $ONI/nvim/lua/user/init.lua $CONFIG_DIR/nvim/lua/user/init.lua && cp $ONI/nvim/init.lua $CONFIG_DIR/nvim/init.lua'
alias colors='help="show terminal colors"; $ONI/bin/colors.sh'
alias ?='help="show alias help message"; show_help'
alias a='help="show all alias help messages"; show_all_help'

# kuberetes aliases
alias prod='help="switch to k8s PROD context"; kubectl config use-context ${PROD_CONTEXT}; export ENVIRONMENT=PROD'
alias dev='help="switch to k8s DEV context"; kubectl config use-context ${DEV_CONTEXT}; export ENVIRONMENT=DEV'
alias qa='help="switch to k8s QA context"; kubectl config use-context ${QA_CONTEXT}; export ENVIRONMENT=QA'
alias h='help="helm alias for current project"; project && helm -n $PROJECT'
alias kt='help="tail k8s logs"; project; stern --color always --exclude "^.*healthz.*$" -n $PROJECT ".*" '
alias kc='help="list k8s contexts"; kubectl config get-contexts'
alias k='help="kubectl alias for current project"; project && kubectl -n $PROJECT'
alias w='help="watch all k8s objects in current project"; project && watch -n5 "kubectl -n $PROJECT get all"'
alias proxy='help="local proxy to current service"; project; $ONI/bin/kube-proxy.sh $PROJECT'
alias forward='help="local forward of current service"; project; $ONI/bin/kube-forward.sh $PROJECT'
alias top-pods='help="top readout of pods in current project"; project && watch -n5 "kubectl -n $PROJECT top pods"'
alias top-nodes='help="top readout of nodes"; project && watch -n5 "kubectl -n $PROJECT top nodes"'

# kubectl alias with autocomplete
complete -F __start_kubectl kubectl
